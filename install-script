#!/bin/env bash
###########################
# Ã‰tienne "maiste" Marais #
#   Installation script   #
#    Version: 20200805    #
###########################

#--------- UTILS ---------#
set -e
cd "$(dirname $0)"
ARGS=0

filter_args () {
  if [[ $ARGS -lt $1 ]]; then
     printf "/!\ Not enough argument(s): wait $1, got $ARGS\n"
     exit 1
  fi
}

#------ LANGUAGES -------#
get_ocaml () {
  printf ">> Build ocaml\n"
  sh <(curl -sL https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)
  opam init
  opam update -y
  opam install -y merlin dune menhir odoc
}

get_rust () {
  printf ">> Build rust\n"
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
  source $HOME/.cargo/env
  rustup update
  rustup component add rls rust-analysis rust-src
}

get_go () {
  printf ">> Build go\n"
  go get -u golang.org/x/tools/gopls
}

get_java () {
  printf ">> Build java\n"
  curl -s "https://get.sdkman.io" | bash
  source "$HOME/.sdkman/bin/sdkman-init.sh"

}

get_sh () {
  npm install -g bash-language-server
}

get_elm () {
  npm install -g @elm-tooling/elm-language-server
}

get_node () {
  printf ">> Build node\n"
  curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  nvm install v12.18.3
  npm install -g ocaml-language-server \
           dockerfile-language-server-nodejs
}

get_python () {
  printf "Build python\n"
  pip3 install --user --upgrade pip
  pip3 install --user python-language-server pynvim
}

get_languages () {
  for lang in $*; do
    case $lang in
      "rust") get_rust;;
      "ocaml") get_ocaml;;
      "go") get_go;;
      "python") get_python;;
      "node") get_node;;
      "java") get_java;;
      "sh") get_sh;;
      "elm") get_elm;;
    esac
  done
}

#--------- NEOVIM -------#
install_nvim () {
  printf ">> Build neovim\n"
  get_python
  get_node
  rm -rf ~/.config/nvim
  stow -v nvim
  nvim -c "PlugInstall | q | q"
}

#-------- SYSTEM --------#
link_lightdm () {
  printf ">> Link lightdm\n"
  sudo systemctl disable gdm
  sudo systemctl enable lightdm
  sudo systemctl start lightdm
}

link_i3 () {
  printf ">> Link i3\n"
  cd ~/.dotfiles
  sudo cp res/xbacklight.conf /etc/X11/xorg.conf.d
  rm -rf ~/.config/i3 ~/.config/dunst
  stow -v i3 dunst
}

link_zsh () {
  printf "Link zsh\n"
  chsh -s /usr/bin/zsh
  if [ -e "$HOME/.oh-my-zsh" ] ; then
    printf "OH-MY-ZSH already installed....\n"
  else
        sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
  fi
  rm -rf ~/.zshrc
  stow -v zsh
}

link_terminal () {
  printf ">> Link terminal\n"
  rm -rf ~/.config/alacritty
  rm -rf ~/.gitconfig
  rm -rf ~/.Xresources
  stow -v terminal
  stow -v cmd
}

get_on_flatpak () {
  flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
  flatpak install flathub com.discordapp.Discord
  flatpak install flathub com.google.AndroidStudio
  flatpak install flathub us.zoom.Zoom
}

postinstall () {
  printf ">> Execute post installation for $1\n"
  sh distro/$1-install
}

get_distro () {
  case $1 in
    "fedora") postinstall $1;;
    "arch") postinstall $1;;
    *) printf "/!\ Distribution not supported\n"; return;;
  esac

}

#--------- HELP ----------#
display_help () {
  printf "Install script

# INFO
It's my personnal install script

# USAGE
 $ ./install-script [CMD]

# CMD
    * system [arch | fedora] => install all the system utilities 
    * install => link all the system requirements
    * lightdm => unlink gdm and link lightdm
    * languages {list} => Install the language requierements.
       list => go / ocaml / python / rust / java / node / sh / elm

# AUTHOR
Script written by maiste
"
}

#------- LAUNCHER --------#
ARGS=$#

case $1 in
  "install")
    filter_args 1
    get_on_flatpak
    link_terminal
    link_i3
    install_nvim
    link_zsh;;
  "system")
    filter_args 2
    get_distro $2;;
  "lightdm")
    filter_args 1
    link_lightdm;;
  "languages")
    filter_args 2
    get_languages $@;;
  *) display_help ;;
esac


